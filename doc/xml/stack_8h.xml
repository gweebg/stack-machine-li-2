<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stack_8h" kind="file" language="C++">
    <compoundname>stack.h</compoundname>
    <includedby refid="main_8c" local="yes">main.c</includedby>
    <includedby refid="parser_8c" local="yes">parser.c</includedby>
    <includedby refid="stack_8c" local="yes">stack.c</includedby>
    <invincdepgraph>
      <node id="2">
        <label>main.c</label>
        <link refid="main_8c"/>
      </node>
      <node id="3">
        <label>parser.c</label>
        <link refid="parser_8c"/>
      </node>
      <node id="4">
        <label>stack.c</label>
        <link refid="stack_8c"/>
      </node>
      <node id="1">
        <label>stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structstack" prot="public">stack</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="stack_8h_1a70ed59adcb4159ac551058053e649640" prot="public" static="no">
        <name>SIZE</name>
        <initializer>10240</initializer>
        <briefdescription>
<para>SIZE é o valor do tamanho máximo da stack. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="6" column="10" bodyfile="stack.h" bodystart="6" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stack_8h_1a4807e11fe59218c775d4c3e53a17f745" prot="public" static="no">
        <type>struct <ref refid="structstack" kindref="compound">stack</ref></type>
        <definition>typedef struct stack stack</definition>
        <argsstring></argsstring>
        <name>stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="22" column="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8h_1a5e7b7130eb56c772f0148df408b8b992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstack" kindref="compound">stack</ref></type>
        <definition>stack create</definition>
        <argsstring>()</argsstring>
        <name>create</name>
        <briefdescription>
<para>Função que inicializa uma stack (structure definida em <ref refid="stack_8h" kindref="compound">stack.h</ref>). </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Devolve a stack criada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="28" column="7" bodyfile="stack.c" bodystart="12" bodyend="18" declfile="stack.h" declline="28" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a99eb4a29f82cfac2504f83a6938f784c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stackStatus</definition>
        <argsstring>(stack *s)</argsstring>
        <name>stackStatus</name>
        <param>
          <type><ref refid="structstack" kindref="compound">stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que verifica o estado da stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Determina o estado verificando o valor do stack pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack a ser avaliada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Devolve :<itemizedlist>
<listitem><para>0, se a stack estiver vazia;</para>
</listitem><listitem><para>1, se a stack estiver cheia;</para>
</listitem><listitem><para>2, se a stack não estiver cheia nem vazia. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="41" column="5" bodyfile="stack.c" bodystart="20" bodyend="42" declfile="stack.h" declline="41" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1ad0e7082c586047ccbba10e8c7553e432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push</definition>
        <argsstring>(stack *s, int value)</argsstring>
        <name>push</name>
        <param>
          <type><ref refid="structstack" kindref="compound">stack</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Retira o elemento no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para>A stack rege-se por &quot;last in, first out&quot;, daí termos de retirar o primeiro elemento e decrementar o stack pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack a ser avaliada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Devolve :<itemizedlist>
<listitem><para>O elemento retirado se a stack não estiver vazia;</para>
</listitem><listitem><para>1, se a stack estiver vazia. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="53" column="5" bodyfile="stack.c" bodystart="64" bodyend="81" declfile="stack.h" declline="53" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1a7cb5df150af207eab70ab7c59c743ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop</definition>
        <argsstring>(stack *s)</argsstring>
        <name>pop</name>
        <param>
          <type><ref refid="structstack" kindref="compound">stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Adiciona um elemento no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack a ser avaliada. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser adicionado à stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Devolve :<itemizedlist>
<listitem><para>0, se foi possivel adiconar o elemento;</para>
</listitem><listitem><para>1, se a stack estiver cheia. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="65" column="5" bodyfile="stack.c" bodystart="44" bodyend="62" declfile="stack.h" declline="65" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="stack_8h_1afa1a903aca7623889aff6a884d158bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dumpStack</definition>
        <argsstring>(stack *s)</argsstring>
        <name>dumpStack</name>
        <param>
          <type><ref refid="structstack" kindref="compound">stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta função despeja todos os elementos contidos na stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack a ser avaliada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Escreve a stack no ecrã, porém não devolve nada, sendo que é do tipo void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.h" line="74" column="6" bodyfile="stack.c" bodystart="83" bodyend="92" declfile="stack.h" declline="74" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6" refid="stack_8h_1a70ed59adcb4159ac551058053e649640" refkind="member"><highlight class="preprocessor">#<sp/>define<sp/>SIZE<sp/>10240</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="structstack" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structstack" kindref="compound">stack</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="structstack_1a28a6f0ba23044df7ac626e8a4e2a3391" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="structstack_1a28a6f0ba23044df7ac626e8a4e2a3391" kindref="member">elems</ref>[<ref refid="stack_8h_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>];</highlight></codeline>
<codeline lineno="20" refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="stack_8h_1a4807e11fe59218c775d4c3e53a17f745" refkind="member"><highlight class="normal">}<sp/><ref refid="stack_8h_1a4807e11fe59218c775d4c3e53a17f745" kindref="member">stack</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="structstack" kindref="compound">stack</ref><sp/><ref refid="stack_8h_1a5e7b7130eb56c772f0148df408b8b992" kindref="member">create</ref>();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a99eb4a29f82cfac2504f83a6938f784c" kindref="member">stackStatus</ref>(<ref refid="structstack" kindref="compound">stack</ref><sp/>*s);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1ad0e7082c586047ccbba10e8c7553e432" kindref="member">push</ref>(<ref refid="structstack" kindref="compound">stack</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1a7cb5df150af207eab70ab7c59c743ab6" kindref="member">pop</ref>(<ref refid="structstack" kindref="compound">stack</ref><sp/>*s);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8h_1afa1a903aca7623889aff6a884d158bdb" kindref="member">dumpStack</ref>(<ref refid="structstack" kindref="compound">stack</ref><sp/>*s);</highlight></codeline>
    </programlisting>
    <location file="stack.h"/>
  </compounddef>
</doxygen>
