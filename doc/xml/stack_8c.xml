<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="stack_8c" kind="file" language="C++">
    <compoundname>stack.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">assert.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="stack_8h" local="yes">stack.h</includes>
    <incdepgraph>
      <node id="4">
        <label>assert.h</label>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>string.h</label>
      </node>
      <node id="1">
        <label>stack.c</label>
        <link refid="stack_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stack.h</label>
        <link refid="stack_8h"/>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="stack_8c_1a5e7b7130eb56c772f0148df408b8b992" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structstack" kindref="compound">stack</ref></type>
        <definition>stack create</definition>
        <argsstring>()</argsstring>
        <name>create</name>
        <briefdescription>
<para>Função que inicializa uma stack. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Devolve a stack criada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="13" column="7" bodyfile="stack.c" bodystart="13" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1a99eb4a29f82cfac2504f83a6938f784c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int stackStatus</definition>
        <argsstring>(stack *s)</argsstring>
        <name>stackStatus</name>
        <param>
          <type><ref refid="structstack" kindref="compound">stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Função que verifica o estado da stack. </para>
        </briefdescription>
        <detaileddescription>
<para>Determina o estado verificando o valor do stack pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack a ser avaliada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Devolve :<itemizedlist>
<listitem><para>0, se a stack estiver vazia;</para>
</listitem><listitem><para>1, se a stack estiver cheia;</para>
</listitem><listitem><para>2, se a stack não estiver cheia nem vazia. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="21" column="5" bodyfile="stack.c" bodystart="21" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1a7cb5df150af207eab70ab7c59c743ab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int pop</definition>
        <argsstring>(stack *s)</argsstring>
        <name>pop</name>
        <param>
          <type><ref refid="structstack" kindref="compound">stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Adiciona um elemento no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack a ser avaliada. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor a ser adicionado à stack. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Devolve :<itemizedlist>
<listitem><para>0, se foi possivel adiconar o elemento;</para>
</listitem><listitem><para>1, se a stack estiver cheia. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="45" column="5" bodyfile="stack.c" bodystart="45" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1ad0e7082c586047ccbba10e8c7553e432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int push</definition>
        <argsstring>(stack *s, int value)</argsstring>
        <name>push</name>
        <param>
          <type><ref refid="structstack" kindref="compound">stack</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Retira o elemento no topo da stack. </para>
        </briefdescription>
        <detaileddescription>
<para>A stack rege-se por &quot;last in, first out&quot;, daí termos de retirar o primeiro elemento e decrementar o stack pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack a ser avaliada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Devolve :<itemizedlist>
<listitem><para>O elemento retirado se a stack não estiver vazia;</para>
</listitem><listitem><para>1, se a stack estiver vazia. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="65" column="5" bodyfile="stack.c" bodystart="65" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="stack_8c_1afa1a903aca7623889aff6a884d158bdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void dumpStack</definition>
        <argsstring>(stack *s)</argsstring>
        <name>dumpStack</name>
        <param>
          <type><ref refid="structstack" kindref="compound">stack</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Esta função despeja todos os elementos contidos na stack. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Stack a ser avaliada. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Escreve a stack no ecrã, porém não devolve nada, sendo que é do tipo void. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="stack.c" line="84" column="6" bodyfile="stack.c" bodystart="84" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><itemizedlist>
<listitem><para>Ficheiro que contém todas as funções relacionadas com a stack </para>
</listitem></itemizedlist>
</para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="copyright"><para>Copyright (c) 2021 </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="stack_8h" kindref="compound">stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="structstack" kindref="compound">stack</ref><sp/><ref refid="stack_8c_1a5e7b7130eb56c772f0148df408b8b992" kindref="member">create</ref>()<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structstack" kindref="compound">stack</ref><sp/>myStack;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>myStack.<ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref><sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>O<sp/>stack<sp/>pointer<sp/>é<sp/>sempre<sp/>inicializado<sp/>com<sp/>o<sp/>valor<sp/>-1<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>myStack;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a99eb4a29f82cfac2504f83a6938f784c" kindref="member">stackStatus</ref>(<ref refid="structstack" kindref="compound">stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref><sp/>==<sp/>-1)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>s-&gt;pointer<sp/>é<sp/>equivalente<sp/>a<sp/>(*s).pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Retorna<sp/>0<sp/>caso<sp/>a<sp/>stack<sp/>esteja<sp/>vazia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s-&gt;<ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref><sp/>==<sp/><ref refid="stack_8h_1a70ed59adcb4159ac551058053e649640" kindref="member">SIZE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Retorna<sp/>1<sp/>caso<sp/>a<sp/>stack<sp/>esteja<sp/>cheia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>2;<sp/></highlight><highlight class="comment">//<sp/>Retorna<sp/>2<sp/>caso<sp/>a<sp/>stack<sp/>não<sp/>esteja<sp/>cheia<sp/>nem<sp/>vazia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;<sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1a7cb5df150af207eab70ab7c59c743ab6" kindref="member">pop</ref>(<ref refid="structstack" kindref="compound">stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;<sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/><ref refid="stack_8c_1a99eb4a29f82cfac2504f83a6938f784c" kindref="member">stackStatus</ref>(s);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>s-&gt;<ref refid="structstack_1a28a6f0ba23044df7ac626e8a4e2a3391" kindref="member">elems</ref>[s-&gt;<ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref>];<sp/></highlight><highlight class="comment">//<sp/>Guarda<sp/>o<sp/>valor<sp/>do<sp/>topo<sp/>no<sp/>stack<sp/>pointer<sp/>(sp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref>--;<sp/></highlight><highlight class="comment">//<sp/>Decrementa<sp/>o<sp/>sp,<sp/>pois<sp/>retiramos<sp/>um<sp/>elemento</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Retorna<sp/>1<sp/>caso<sp/>a<sp/>stack<sp/>esteja<sp/>vazia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1ad0e7082c586047ccbba10e8c7553e432" kindref="member">push</ref>(<ref refid="structstack" kindref="compound">stack</ref><sp/>*s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>status<sp/>=<sp/><ref refid="stack_8c_1a99eb4a29f82cfac2504f83a6938f784c" kindref="member">stackStatus</ref>(s);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref>++;<sp/></highlight><highlight class="comment">//<sp/>Incrementa<sp/>1<sp/>no<sp/>stack<sp/>pointer<sp/>pois<sp/>estamos<sp/>a<sp/>adicionar<sp/>um<sp/>elemento<sp/>na<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structstack_1a28a6f0ba23044df7ac626e8a4e2a3391" kindref="member">elems</ref>[s-&gt;<ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref>]<sp/>=<sp/>value;<sp/></highlight><highlight class="comment">//<sp/>Adiciona<sp/>o<sp/>valor<sp/>na<sp/>stack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/></highlight><highlight class="comment">//<sp/>Retorna<sp/>1<sp/>caso<sp/>a<sp/>stack<sp/>esteja<sp/>cheia</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stack_8c_1afa1a903aca7623889aff6a884d158bdb" kindref="member">dumpStack</ref>(<ref refid="structstack" kindref="compound">stack</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>printf(&quot;Stack<sp/>Dump:<sp/>&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s-&gt;<ref refid="structstack_1a3f03bb7e120fad95c7a819c1cb088df9" kindref="member">pointer</ref>+1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%ld&quot;</highlight><highlight class="normal">,<sp/>s-&gt;<ref refid="structstack_1a28a6f0ba23044df7ac626e8a4e2a3391" kindref="member">elems</ref>[i]);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="stack.c"/>
  </compounddef>
</doxygen>
